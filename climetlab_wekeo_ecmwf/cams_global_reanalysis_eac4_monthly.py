#!/usr/bin/env python3
# (C) Copyright 2023 European Centre for Medium-Range Weather Forecasts.
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation
# nor does it submit to any jurisdiction.
from __future__ import annotations
from climetlab.decorators import normalize

from climetlab_wekeo_ecmwf.main import Main


class cams_global_reanalysis_eac4_monthly(Main):
    name = "EO:ECMWF:DAT:CAMS_GLOBAL_REANALYSIS_EAC4_MONTHLY"
    dataset = "EO:ECMWF:DAT:CAMS_GLOBAL_REANALYSIS_EAC4_MONTHLY"

    choices = [
        "format_",
    ]

    string_selects = [
        "variable",
        "variable",
        "pressure_level",
        "model_level",
        "year",
        "month",
        "product_type",
        "time",
    ]

    @normalize(
        "variable",
        [
            "2m_dewpoint_temperature",
            "2m_temperature",
            "black_carbon_aerosol_optical_depth_550nm",
            "charnock",
            "dust_aerosol_optical_depth_550nm",
            "ice_temperature_layer_1",
            "leaf_area_index_high_vegetation",
            "leaf_area_index_low_vegetation",
            "mean_sea_level_pressure",
            "organic_matter_aerosol_optical_depth_550nm",
            "particulate_matter_10um",
            "particulate_matter_2.5um",
            "sea_ice_cover",
            "sea_salt_aerosol_optical_depth_550nm",
            "sea_surface_temperature",
            "snow_albedo",
            "snow_density",
            "snow_depth",
            "soil_temperature_level_1",
            "sulphate_aerosol_optical_depth_550nm",
            "surface_pressure",
            "temperature_of_snow_layer",
            "total_aerosol_optical_depth_550nm",
            "total_column_carbon_monoxide",
            "total_column_ethane",
            "total_column_formaldehyde",
            "total_column_hydroxyl_radical",
            "total_column_isoprene",
            "total_column_methane",
            "total_column_nitric_acid",
            "total_column_nitrogen_dioxide",
            "total_column_nitrogen_monoxide",
            "total_column_ozone",
            "total_column_peroxyacetyl_nitrate",
            "total_column_propane",
            "total_column_sulphur_dioxide",
            "total_column_water",
            "total_column_water_vapour",
            "vertically_integrated_mass_of_dust_aerosol_0.03-0.55um",
            "vertically_integrated_mass_of_dust_aerosol_0.55-9um",
            "vertically_integrated_mass_of_dust_aerosol_9-20um",
            "vertically_integrated_mass_of_hydrophilic_black_carbon_aerosol",
            "vertically_integrated_mass_of_hydrophilic_organic_matter_aerosol",
            "vertically_integrated_mass_of_hydrophobic_black_carbon_aerosol",
            "vertically_integrated_mass_of_hydrophobic_organic_matter_aerosol",
            "vertically_integrated_mass_of_sea_salt_aerosol_0.03-0.5um",
            "vertically_integrated_mass_of_sea_salt_aerosol_0.5-5um",
            "vertically_integrated_mass_of_sea_salt_aerosol_5-20um",
            "vertically_integrated_mass_of_sulphate_aerosol",
            "vertically_integrated_mass_of_sulphur_dioxide",
        ],
        multiple=True,
    )
    @normalize(
        "variable",
        [
            "carbon_monoxide",
            "dust_aerosol_0.03-0.55um_mixing_ratio",
            "dust_aerosol_0.55-0.9um_mixing_ratio",
            "dust_aerosol_0.9-20um_mixing_ratio",
            "ethane",
            "formaldehyde",
            "geopotential",
            "hydrophilic_black_carbon_aerosol_mixing_ratio",
            "hydrophilic_organic_matter_aerosol_mixing_ratio",
            "hydrophobic_black_carbon_aerosol_mixing_ratio",
            "hydrophobic_organic_matter_aerosol_mixing_ratio",
            "hydroxyl_radical",
            "isoprene",
            "methane_chemistry",
            "nitric_acid",
            "nitrogen_dioxide",
            "nitrogen_monoxide",
            "ozone",
            "peroxyacetyl_nitrate",
            "potential_vorticity",
            "propane",
            "relative_humidity",
            "sea_salt_aerosol_0.03-0.5um_mixing_ratio",
            "sea_salt_aerosol_0.5-5um_mixing_ratio",
            "sea_salt_aerosol_5-20um_mixing_ratio",
            "so2_precursor_mixing_ratio",
            "specific_humidity",
            "sulphate_aerosol_mixing_ratio",
            "sulphur_dioxide",
            "temperature",
            "vertical_velocity",
        ],
        multiple=True,
    )
    @normalize(
        "year",
        [
            "2003",
            "2004",
            "2005",
            "2006",
            "2007",
            "2008",
            "2009",
            "2010",
            "2011",
            "2012",
            "2013",
            "2014",
            "2015",
            "2016",
            "2017",
            "2018",
            "2019",
            "2020",
            "2021",
            "2022",
        ],
        multiple=True,
    )
    @normalize(
        "month",
        [
            "01",
            "02",
            "03",
            "04",
            "05",
            "06",
            "07",
            "08",
            "09",
            "10",
            "11",
            "12",
        ],
        multiple=True,
    )
    @normalize(
        "product_type",
        [
            "monthly_mean",
            "monthly_mean_by_hour_of_day",
        ],
        multiple=True,
    )
    @normalize(
        "time",
        [
            "00:00",
            "03:00",
            "06:00",
            "09:00",
            "12:00",
            "15:00",
            "18:00",
            "21:00",
        ],
        multiple=True,
    )
    @normalize(
        "format_",
        [
            "grib",
            "netcdf",
        ],
    )
    @normalize("area", "bounding-box(list)")
    @normalize(
        "pressure_level",
        [
            "1",
            "10",
            "100",
            "1000",
            "150",
            "2",
            "20",
            "200",
            "250",
            "3",
            "30",
            "300",
            "400",
            "5",
            "50",
            "500",
            "600",
            "7",
            "70",
            "700",
            "800",
            "850",
            "900",
            "925",
            "950",
        ],
        multiple=True,
    )
    @normalize(
        "model_level",
        [
            "60",
        ],
        multiple=True,
    )
    def __init__(
        self,
        variable,
        variable,
        year,
        month,
        product_type,
        time,
        format_,
        area=None,
        pressure_level=None,
        model_level=None,
    ):
        super().__init__(
            variable=variable,
            variable=variable,
            year=year,
            month=month,
            product_type=product_type,
            time=time,
            format_=format_,
            area=area,
            pressure_level=pressure_level,
            model_level=model_level,
        )
