#!/usr/bin/env python3
# (C) Copyright 2023 European Centre for Medium-Range Weather Forecasts.
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation
# nor does it submit to any jurisdiction.
from __future__ import annotations
from climetlab.decorators import normalize

from climetlab_wekeo_ecmwf.main import Main


class cams_global_reanalysis_eac4(Main):
    name = "EO:ECMWF:DAT:CAMS_GLOBAL_REANALYSIS_EAC4"
    dataset = "EO:ECMWF:DAT:CAMS_GLOBAL_REANALYSIS_EAC4"

    choices = [
        "format_",
    ]

    string_selects = [
        "variable",
        "variable",
        "variable",
        "variable",
        "variable",
        "variable",
        "variable",
        "pressure_level",
        "model_level",
        "time",
    ]

    @normalize(
        "variable",
        [
            "10m_u_component_of_wind",
            "10m_v_component_of_wind",
            "2m_dewpoint_temperature",
            "2m_temperature",
            "black_carbon_aerosol_optical_depth_550nm",
            "dust_aerosol_optical_depth_550nm",
            "land_sea_mask",
            "mean_sea_level_pressure",
            "organic_matter_aerosol_optical_depth_550nm",
            "particulate_matter_10um",
            "particulate_matter_1um",
            "particulate_matter_2.5um",
            "sea_salt_aerosol_optical_depth_550nm",
            "sulphate_aerosol_optical_depth_550nm",
            "surface_geopotential",
            "surface_pressure",
            "total_aerosol_optical_depth_1240nm",
            "total_aerosol_optical_depth_469nm",
            "total_aerosol_optical_depth_550nm",
            "total_aerosol_optical_depth_670nm",
            "total_aerosol_optical_depth_865nm",
            "total_column_carbon_monoxide",
            "total_column_ethane",
            "total_column_formaldehyde",
            "total_column_hydrogen_peroxide",
            "total_column_hydroxyl_radical",
            "total_column_isoprene",
            "total_column_methane",
            "total_column_nitric_acid",
            "total_column_nitrogen_dioxide",
            "total_column_nitrogen_monoxide",
            "total_column_ozone",
            "total_column_peroxyacetyl_nitrate",
            "total_column_propane",
            "total_column_sulphur_dioxide",
            "total_column_water_vapour",
        ],
        multiple=True,
    )
    @normalize(
        "variable",
        [
            "carbon_monoxide",
            "dust_aerosol_0.03-0.55um_mixing_ratio",
            "dust_aerosol_0.55-0.9um_mixing_ratio",
            "dust_aerosol_0.9-20um_mixing_ratio",
            "ethane",
            "formaldehyde",
            "hydrogen_peroxide",
            "hydrophilic_black_carbon_aerosol_mixing_ratio",
            "hydrophilic_organic_matter_aerosol_mixing_ratio",
            "hydrophobic_black_carbon_aerosol_mixing_ratio",
            "hydrophobic_organic_matter_aerosol_mixing_ratio",
            "hydroxyl_radical",
            "isoprene",
            "nitric_acid",
            "nitrogen_dioxide",
            "nitrogen_monoxide",
            "ozone",
            "peroxyacetyl_nitrate",
            "propane",
            "sea_salt_aerosol_0.03-0.5um_mixing_ratio",
            "sea_salt_aerosol_0.5-5um_mixing_ratio",
            "sea_salt_aerosol_5-20um_mixing_ratio",
            "specific_humidity",
            "sulphate_aerosol_mixing_ratio",
            "sulphur_dioxide",
            "temperature",
        ],
        multiple=True,
    )
    @normalize(
        "variable",
        [
            "near_ir_albedo_for_diffuse_radiation",
            "near_ir_albedo_for_direct_radiation",
            "snow_albedo",
            "uv_visible_albedo_for_diffuse_radiation",
            "uv_visible_albedo_for_direct_radiation",
        ],
        multiple=True,
    )
    @normalize(
        "variable",
        [
            "total_column_acetone",
            "total_column_aldehydes",
            "total_column_ethanol",
            "total_column_ethene",
            "total_column_formic_acid",
            "total_column_methanol",
            "total_column_methyl_peroxide",
            "total_column_olefins",
            "total_column_organic_nitrates",
            "total_column_paraffins",
            "vertically_integrated_mass_of_dust_aerosol_0.03-0.55um",
            "vertically_integrated_mass_of_dust_aerosol_0.55-9um",
            "vertically_integrated_mass_of_dust_aerosol_9-20um",
            "vertically_integrated_mass_of_hydrophilic_black_carbon_aerosol",
            "vertically_integrated_mass_of_hydrophilic_organic_matter_aerosol",
            "vertically_integrated_mass_of_hydrophobic_black_carbon_aerosol",
            "vertically_integrated_mass_of_hydrophobic_organic_matter_aerosol",
            "vertically_integrated_mass_of_sea_salt_aerosol_0.03-0.5um",
            "vertically_integrated_mass_of_sea_salt_aerosol_0.5-5um",
            "vertically_integrated_mass_of_sea_salt_aerosol_5-20um",
            "vertically_integrated_mass_of_sulphate_aerosol",
        ],
        multiple=True,
    )
    @normalize(
        "variable",
        [
            "high_cloud_cover",
            "high_vegetation_cover",
            "lake_cover",
            "leaf_area_index_high_vegetation",
            "leaf_area_index_low_vegetation",
            "lifting_threshold_speed",
            "low_cloud_cover",
            "low_vegetation_cover",
            "mean_altitude_of_maximum_injection",
            "medium_cloud_cover",
            "sea_ice_cover",
            "sea_surface_temperature",
            "skin_reservoir_content",
            "skin_temperature",
            "snow_depth",
            "soil_clay_content",
            "soil_type",
            "surface_roughness",
            "total_cloud_cover",
            "total_column_water",
            "type_of_high_vegetation",
            "type_of_low_vegetation",
        ],
        multiple=True,
    )
    @normalize(
        "variable",
        [
            "acetone",
            "acetone_product",
            "aldehydes",
            "amine",
            "ammonia",
            "ammonium",
            "dimethyl_sulfide",
            "dinitrogen_pentoxide",
            "ethanol",
            "ethene",
            "formic_acid",
            "hydroperoxy_radical",
            "lead",
            "methacrolein_mvk",
            "methacrylic_acid",
            "methane_chemistry",
            "methane_sulfonic_acid",
            "methanol",
            "methyl_glyoxal",
            "methyl_peroxide",
            "methylperoxy_radical",
            "nitrate",
            "nitrate_radical",
            "olefins",
            "organic_ethers",
            "organic_nitrates",
            "paraffins",
            "pernitric_acid",
            "peroxides",
            "peroxy_acetyl_radical",
            "propene",
            "radon",
            "stratospheric_ozone_tracer",
            "terpenes",
        ],
        multiple=True,
    )
    @normalize(
        "variable",
        [
            "fraction_of_cloud_cover",
            "geopotential",
            "potential_vorticity",
            "relative_humidity",
            "specific_cloud_ice_water_content",
            "specific_cloud_liquid_water_content",
            "specific_rain_water_content",
            "specific_snow_water_content",
            "u_component_of_wind",
            "v_component_of_wind",
            "vertical_velocity",
        ],
        multiple=True,
    )
    @normalize(
        "time",
        [
            "00:00",
            "03:00",
            "06:00",
            "09:00",
            "12:00",
            "15:00",
            "18:00",
            "21:00",
        ],
        multiple=True,
    )
    @normalize(
        "format_",
        [
            "grib",
            "netcdf",
        ],
    )
    @normalize("area", "bounding-box(list)")
    @normalize("start", "date(%Y-%m-%dT%H:%M:%SZ)")
    @normalize("end", "date(%Y-%m-%dT%H:%M:%SZ)")
    @normalize(
        "pressure_level",
        [
            "1",
            "10",
            "100",
            "1000",
            "150",
            "2",
            "20",
            "200",
            "250",
            "3",
            "30",
            "300",
            "400",
            "5",
            "50",
            "500",
            "600",
            "7",
            "70",
            "700",
            "800",
            "850",
            "900",
            "925",
            "950",
        ],
        multiple=True,
    )
    @normalize(
        "model_level",
        [
            "1",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "2",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "3",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "4",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "5",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "6",
            "60",
            "7",
            "8",
            "9",
        ],
        multiple=True,
    )
    def __init__(
        self,
        variable,
        variable,
        variable,
        variable,
        variable,
        variable,
        variable,
        time,
        format_,
        area=None,
        start="2003-01-01",
        end="2022-12-31",
        pressure_level=None,
        model_level=None,
    ):
        super().__init__(
            variable=variable,
            variable=variable,
            variable=variable,
            variable=variable,
            variable=variable,
            variable=variable,
            variable=variable,
            time=time,
            format_=format_,
            area=area,
            start=start,
            end=end,
            pressure_level=pressure_level,
            model_level=model_level,
        )
